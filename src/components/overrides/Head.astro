---
import Default from "@astrojs/starlight/components/Head.astro";
import { differenceInCalendarDays } from "date-fns";
import "tippy.js/dist/tippy.css";

import { getEntry } from "astro:content";
import { getOgImage } from "~/util/og";
import type { CollectionEntry } from "astro:content";

// grab the current top-level folder. Remove . characters for 1.1.1.1 URL
const currentSection = Astro.url.pathname.split("/")[1].replaceAll(".", "");
const head = Astro.locals.starlightRoute.entry.data.head;

if (currentSection) {
	const product = await getEntry("products", currentSection);

	if (product) {
		if (product.data.meta.title) {
			const titleIdx = head.findIndex((x) => x.tag === "title");

			let title: string;

			if (titleIdx !== -1) {
				const existingTitle = head[titleIdx].content;
				title = `${existingTitle} · ${product.data.meta.title}`;

				head[titleIdx] = {
					tag: "title",
					attrs: {},
					content: title,
				};
			} else {
				title = `${Astro.locals.starlightRoute.entry.data.title} · ${product.data.meta.title}`;
				head.push({
					tag: "title",
					attrs: {},
					content: title,
				});
			}

			head.push({
				tag: "meta",
				attrs: { property: "og:title", content: title },
				content: "",
			});
		}

		if (product.data.product.title) {
			const productName = product.data.product.title;
			head.push({
				tag: "meta",
				attrs: {
					name: "pcx_product",
					content: productName,
				},
				content: "",
			});
			head.push({
				tag: "meta",
				attrs: {
					name: "algolia_product_filter",
					content: productName,
				},
				content: "",
			});
		}

		if (product.data.product.group) {
			head.push({
				tag: "meta",
				attrs: {
					name: "pcx_content_group",
					content: product.data.product.group,
				},
				content: "",
			});
		}
	}

	if (currentSection === "style-guide") {
		head.push({
			tag: "meta",
			attrs: {
				name: "robots",
				content: "noindex",
			},
			content: "",
		});
	}
}

// Add noindex tag if present in frontmatter

if (Astro.locals.starlightRoute.entry.data.noindex) {
	head.push({
		tag: "meta",
		attrs: {
			name: "robots",
			content: "noindex",
		},
		content: "",
	});
}

// Adding metadata used for reporting and search indexing
// content type
if (Astro.locals.starlightRoute.entry.data.pcx_content_type) {
	const contentType = Astro.locals.starlightRoute.entry.data.pcx_content_type;
	head.push({
		tag: "meta",
		attrs: {
			name: "pcx_content_type",
			content: contentType,
		},
		content: "",
	});
	head.push({
		tag: "meta",
		attrs: {
			name: "algolia_content_type",
			content: contentType,
		},
		content: "",
	});
}

// other products
if (Astro.locals.starlightRoute.entry.data.products) {
	const additionalProducts = Astro.locals.starlightRoute.entry.data.products;
	head.push({
		tag: "meta",
		attrs: {
			name: "pcx_additional_products",
			content: additionalProducts.toString(),
		},
		content: "",
	});
}

// other products
if (Astro.locals.starlightRoute.entry.data.tags) {
	const pageTags = Astro.locals.starlightRoute.entry.data.tags;
	head.push({
		tag: "meta",
		attrs: {
			name: "pcx_tags",
			content: pageTags.toString(),
		},
		content: "",
	});
}

if (Astro.locals.starlightRoute.entry.data.updated) {
	const daysBetween = differenceInCalendarDays(
		new Date(),
		Astro.locals.starlightRoute.entry.data.updated,
	);
	head.push({
		tag: "meta",
		attrs: {
			name: "pcx_last_reviewed",
			content: daysBetween.toString(),
		},
		content: "",
	});
}

// end metadata

if (Astro.locals.starlightRoute.entry.data.pcx_content_type === "changelog") {
	const href = new URL(Astro.site ?? "");
	href.pathname = Astro.locals.starlightRoute.entry.slug.concat("/index.xml");

	head.push({
		tag: "link",
		attrs: {
			rel: "alternate",
			type: "application/rss+xml",
			href: href.toString(),
		},
		content: "",
	});
}

if (Astro.locals.starlightRoute.entry.data.external_link) {
	head.push({
		tag: "meta",
		attrs: {
			content: "noindex",
			name: "robots",
		},
		content: "",
	});
	head.push({
		tag: "meta",
		attrs: {
			content: `0; url=${Astro.locals.starlightRoute.entry.data.external_link}`,
			"http-equiv": "refresh",
		},
		content: "",
	});
}

const ogImagePath = await getOgImage(
	(Astro.locals.starlightRoute.originalEntry as CollectionEntry<"changelog">) ??
		Astro.locals.starlightRoute.entry,
);
const ogImageUrl = new URL(ogImagePath, Astro.url.origin).toString();

const ogImageTags = [
	{
		tag: "meta",
		attrs: {
			name: "image",
			content: ogImageUrl,
		},
		content: "",
	},
	{
		tag: "meta",
		attrs: {
			name: "og:image",
			content: ogImageUrl,
		},
		content: "",
	},
	{
		tag: "meta",
		attrs: {
			name: "twitter:image",
			content: ogImageUrl,
		},
		content: "",
	},
] as const;

head.push(...ogImageTags);
---

<script src="src/scripts/footnotes.ts"></script>
<script src="src/scripts/mermaid.ts"></script>
<script src="src/scripts/analytics.ts"></script>
<Default><slot /></Default>
